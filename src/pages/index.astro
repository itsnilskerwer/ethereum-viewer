---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
/* import { getCollection } from 'astro:content'; */
import FormattedDate from '../components/FormattedDate.astro';

// GET REQUEST (SIMPLE QUERIES)
const encodedGetQuery = encodeURIComponent('CONSTRUCT ?s ?p ?o WHERE { ?s ?p ?o . }'); // SELECT returns tabular format e.g. csv
const url = `https://sturdy-bassoon-x4wj6jjwxrcv9wr-8080.app.github.dev/jakarta-example/eip-sparql-query?query=${encodedGetQuery}`;
// const postQuery = `SELECT ?document ?author WHERE { ?document <http://example.org/hasAuthor> ?author . }`;

// Send the GET request
  const response = await fetch(url, {
    method: 'GET',
    headers: {
      // 'Accept': 'application/sparql-results+json', 
	  'Accept': 'text/turtle',
    },
  });
  if (!response.ok) {
    throw new Error(`Response status: ${response.status}`);
  }
  // const jsonData = await response.json(); // Handle JSON response
  const turtleData = await response.text(); // Handle Turtle response as text
  console.log(turtleData);


// POST REQUEST (COMPLEX QUERIES)
/* try {
  const response = await fetch('https://sturdy-bassoon-x4wj6jjwxrcv9wr-8080.app.github.dev/jakarta-example/sparql-query', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/sparql-query',
      'Accept': 'application/sparql-results+json', // Expecting a JSON response
    },
    body: query, // Send the SPARQL query in the body of the request
  });

  if (!response.ok) {
    throw new Error(`Response status: ${response.status}`);
  }

  const jsonData = await response.json(); // Handle JSON response
  console.log(jsonData);
} catch (error) {
  console.error('Error fetching data:', error);
} */
	
/* const posts = (await getCollection('blog')).sort(
	(a, b) => a.data.pubDate.valueOf() - b.data.pubDate.valueOf()
); */

---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>
			main {
				width: 960px;
			}
			ul {
				display: flex;
				flex-wrap: wrap;
				gap: 2rem;
				list-style-type: none;
				margin: 0;
				padding: 0;
			}
			ul li {
				width: calc(50% - 1rem);
			}
			ul li * {
				text-decoration: none;
				transition: 0.2s ease;
			}
			ul li:first-child {
				width: 100%;
				margin-bottom: 1rem;
				text-align: center;
			}
			ul li:first-child img {
				width: 100%;
			}
			ul li:first-child .title {
				font-size: 2.369rem;
			}
			ul li img {
				margin-bottom: 0.5rem;
				border-radius: 12px;
			}
			ul li a {
				display: block;
			}
			.title {
				margin: 0;
				color: rgb(var(--black));
				line-height: 1;
			}
			.date {
				margin: 0;
				color: rgb(var(--gray));
			}
			ul li a:hover h4,
			ul li a:hover .date {
				color: rgb(var(--accent));
			}
			ul a:hover img {
				box-shadow: var(--box-shadow);
			}
			@media (max-width: 720px) {
				ul {
					gap: 0.5em;
				}
				ul li {
					width: 100%;
					text-align: center;
				}
				ul li:first-child {
					margin-bottom: 0;
				}
				ul li:first-child .title {
					font-size: 1.563em;
				}
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<!-- <section>
				<ul>
					{ posts.map((post) => (
						<li>
							<a href={`/${post.slug}/`}>
								<img width={720} height={360} src={post.data.heroImage} alt="hero image" />
								<h4 class="title">{post.data.title}</h4>
								<p class="date">
									<FormattedDate date={post.data.pubDate} />
								</p>
							</a>
						</li>
					))}
				</ul>
			</section> -->
			<section>
				<h2>Turtle Textarea</h2>
				<p class="date"><FormattedDate date={new Date()} /></p>
				<textarea id="turtle-textarea" readonly>{turtleData}</textarea>
			</section>
		</main>
		<Footer />
	</body>
</html>
